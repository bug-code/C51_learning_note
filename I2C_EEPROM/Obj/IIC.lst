C51 COMPILER V9.01   IIC                                                                   07/14/2022 11:37:45 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE IIC
OBJECT MODULE PLACED IN .\Obj\IIC.obj
COMPILER INVOKED BY: E:\Keil\C51\BIN\C51.EXE App\iic\IIC.c BROWSE INCDIR(.\App\24c02;.\App\iic;.\App\key;.\App\smg;.\Pub
                    -lic;.\App\func_test) DEBUG OBJECTEXTEND PRINT(.\Obj\IIC.lst) OBJECT(.\Obj\IIC.obj)

line level    source

   1          #include "IIC.h"
   2          
   3          //IIC启动信号
   4          void IIC_start(void){
   5   1              
   6   1              IIC_SDA = 1;
   7   1              IIC_SCL = 1;//SDA间隔了这个执行语句，大于其最小间隔0.25us
   8   1              IIC_SDA = 0; //产生SDA下降沿，起始信号
   9   1              IIC_SCL=0; //低电平期间才允许传输数据
  10   1      }
  11          //IIC停止信号 
  12          void IIC_stop(void){
  13   1              IIC_SDA = 0;
  14   1              IIC_SCL = 1;//SDA间隔了这个执行语句，大于其最小间隔0.25us
  15   1              IIC_SDA = 1;//产生SDA上升沿，终止信号
  16   1      }
  17          //IIC发送应答信号，ack为1非应答，ack为0应答
  18          void IIC_SendACK(const unsigned char ack){
  19   1              IIC_SDA = ack;//特定电平脉冲
  20   1              IIC_SCL = 1;//拉高电平，使SDA电平脉冲保持稳定
  21   1              IIC_SCL = 0;//以上ACK信号已产生，拉低电平使后续能传输数据
  22   1      }
  23          /*
  24                  主机发送完数据后，接收从机发出的ACK信号,超过时间默认非应答，终止传输
  25                  返回值ack: 0应答信号，1非应答信号
  26          */
  27          unsigned char IIC_GetACK(void){
  28   1      
  29   1              unsigned char cnt=0;
  30   1              unsigned char ack;
  31   1              /*默认高电平(漏极开路+上拉电阻)，
  32   1              主机释放总线,因为设备是串联的，
  33   1              一个为低电平全为低电平*/
  34   1      
  35   1              IIC_SDA=1;
  36   1              IIC_SCL=1;
  37   1              while(IIC_SDA){
  38   2                 ++cnt;
  39   2                 if(cnt>100){
  40   3                        IIC_stop();
  41   3                        break;
  42   3                 } 
  43   2              }
  44   1              ack = IIC_SDA;
  45   1              IIC_SCL=0;
  46   1              /*总线释放后由从机接管，从机发送应答*/
  47   1              return ack;
  48   1      
  49   1      }
  50          
  51          /*
  52          IIC获取数据，返回接收的数据byte
  53          根据参数ack，确定发送非应答ack=1，或应答ack=0.
  54          由于设备串联，漏极开路+上拉电阻，当某个设备SDA为0时，整个SDA上都为0.
C51 COMPILER V9.01   IIC                                                                   07/14/2022 11:37:45 PAGE 2   

  55          因此接收设备将SDA置为1，接收设备释放SDA总线，让主机控制SDA数据总线，因为主机要发送数据。
  56          */
  57          unsigned char IIC_get_byte(const unsigned char ack){
  58   1               unsigned char i , byte=0x00;
  59   1               IIC_SDA = 1;    //根据时序图，接收数据时， 接收设备将SDA置1,释放总线控制权 
  60   1               for(i=0 ; i<8 ; ++i){
  61   2                      IIC_SCL =1;       // 拉高SCL电平，使接收的数据有效
  62   2                      if(IIC_SDA) byte |= (0x80>>i); // 根据主机控制的SDA,从高到低接收数据
  63   2                      IIC_SCL=0; //拉低电平准备下一位数据接收
  64   2               }
  65   1               IIC_SendACK(ack);
  66   1      
  67   1               return byte;
  68   1      }
  69          /*      关键：SCL低电平时，SDA才允许变化；SCL高电平时，SDA须保持稳定
  70                  IIC发送信号。谁发送信号谁就为主机，谁就控制时钟线SCL、数据线SDA.
  71                  当发送信号前，主机已经控制了SCL为低电平(函数IIC_start)。
  72                  返回值：0发送成功，1发送失败
  73          */
  74          unsigned char IIC_send_byte(const unsigned char dat){
  75   1              unsigned char i , ack;
  76   1              for(i=0 ; i<8 ; ++i){
  77   2                      IIC_SDA = dat&(0x80>>i);//数据从高位到低位依次传输
  78   2                      IIC_SCL = 1;//获取了数据，拉高SCL，保持SDA稳定
  79   2                      IIC_SCL =0; // 拉低SCL，准备传输下一个数据      
  80   2              }
  81   1      
  82   1              ack = IIC_GetACK();//发送完数据，获取接收设备返回的ACK
  83   1              return ack;
  84   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    132    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
